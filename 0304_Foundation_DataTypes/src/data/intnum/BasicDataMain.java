package data.intnum;

public class BasicDataMain {

	public static void main(String[] args) {
		// 데이터 타입  == 자료형(테이터 종류)
		// 자바 기본형 (primitives)   8가지종류 존재
		// 자바는 매우 강력한 정적 데이터 타입 언어 이기에  탄탄하고 규모가 있는 프로젝트를 짤때에 안정적으로 실행할수 있음
		
		// 정적+동적 데이터를 갖고 있는 언어들이 출시
		// 정수 계역 기본형(양을 표현하는 수치형 계열)
		// 정수 계역의 크기(수를 표현하는 경우의 수 == 범위)
		// 바이트 단위로 크기를 표현,
		
		/*  -----------    Byte < short < int < long  ----------- */		
		
		/*++++++++++++++++++++++++++++++++++++++++++    Byte  +++++++++++++++++++++++++++++++++++++++++++++++++++*/		
		// byte 1byte, 8bit의 정수 공간 ==> 2^8(256가지)의 경우의 수 표현
		// +-부호가 있는 정수를 표현 함
		// -2^7 ~ 0 ~( +2^7-1 )
		// 메모리 예약 - JVM이 저장공간확보 하도록 함 (1byte == 8bits 의 공간이 확보)
		byte value1; 
		
		
		value1 = -128; //음수는 -128까지만 지원
		value1 = 0;
		value1 = 127; 	 //양수는 127까지만 지원
				
		// 이진법 00000000 ~ 11111111 
		// 4비트 단위 = nibble  => 2nibbles = 1byte
		
		byte value2;
		
		value2 = (byte)128; //타입 강제 변환(캐스팅) = 값이 손실되거나 변환된 값으로 들어갈 가능성이 높음
		System.out.println(value2);
		
		/*++++++++++++++++++++++++++++++++++++++++++    Short  +++++++++++++++++++++++++++++++++++++++++++++++++++*/		
		// short 2byte, 16bit의 정수 공간 ==> 2^16(65536가지)의 경우의 수 표현
		// -2^16 ~ 0 ~ +(2^16-1)
		short value3;
		value3 = -32768; // 음수 : -32768 까지만 지원;
		value3 = 0;
		value3 = 32767;  // 양수 : 32767 까지만 지원;
		
		/*++++++++++++++++++++++++++++++++++++++++++    Int  +++++++++++++++++++++++++++++++++++++++++++++++++++*/		
		// 4byte 정수 수치형 데이터 ,32bit 정수 공간 ==> 2^32(4294967296 가지)의 경우의 수 표현
		// -2^32 ~ 0 ~ +(2^32-1)
		
		int value4;
		value4 = 0;
		value4 = value3 -1;
		value4 = 2100000000;
		// value4 = 2200000000; //22억 수치형 표현은 자바에서 허용안됨
		// 22억을 표현하는 8byte 정수 표현 long형
		// 자바의 일반 수치값 데이터는 모두 기본 int형으로 표현되고, 모든 정수 연산의 처리도 int형을 기본으로 함
		
		
		/*++++++++++++++++++++++++++++++++++++++++++    Long  +++++++++++++++++++++++++++++++++++++++++++++++++++*/		
		long value5; // 8byte 64bit 점수공간 --> 2^64()의 경수의 수 표현
		int a = 0; //4bytr 정수 0 수치데이터
		long b1 = 0; //long형에 4byte 정수를 담은 것임 (암시적인 데이터 캐스팅)
		long b2 = 0L; //8bytr 정수 0 수치데이터
		value5 = 2200000000L; //22억 이상의 숫자는 자바에서 지원 안하기에 long형을 사용해 literal기호를 사용
		
		//long형 정수 값을 표현하는 Literal 기호
		
		/*++++++++++++++++++++++++++++++++++++++++++   정수 연산 operation   +++++++++++++++++++++++++++++++++++++++++++++++++++*/
		byte num1; //변수선언
		num1 = 127; // 데이터 할당
		byte num2 = 127; // 초기화 
		// byte num3 = num1 + num2; // 1byte이기에 127 이상의 숫자를 담을수 없음 (데이터 캐스팅을 한다하면 전혀 다른 값이 출력됨)
		short num4 = (short)(num1 + num2); // (num1 + num2) 자바에선 기본 int형으로 인식이 되기에 short로 데이터 캐스팅이 필요함
		int num5 = num1 + num2; // (num1 + num2) == 연산결과가 정수라서 정수변수에 저장됨
		
		/*++++++++++++++++++++++++++++++++++++++++++   정수의 표현(radix) => base 기준의 수체계   +++++++++++++++++++++++++++++++++++++++++++++++++++*/
		int decimal; //10진법 = decimal ( 0 ~ 9 )
		decimal = 10;
		int hexadecimal; // 16진법 = hexadecimal (0 ~ 9, A ~ F)
		hexadecimal = 0xA; // 0x 리터럴 기호로 16진법 정수를 표현
		// hexadecimal = 0x0000000A; //4byte를 표현하는 16진법의 자리수 하나는 4bit를 표현 = 1byte는 16진법에서 2자리 수
		// (0x000000FF(0xFF) = (F*16^1)+(F*16^0) = (15 * 16)+(15 *1) = 255)
		// (0x0000FFFF(0xFFFF) = (F*16^3)+(F*16^2)+(F*16^1)+(F*16^0) = 65535 )
		
		int binary1;
		// 0b 리터럴 기호로 2진법 정수 표현
		binary1 = 0b1010; // (2^3) + (2^2) + (2^1) + (2^0) = (8+2) =10
		int binary2;
		binary2 = 0b00000000000000000000000000001010;
		// 0b00000000000000000000000000001010  => 0b00000000 00000000 00000000 00001010  => 0b00000000_00000000_00000000_00001010 
	
		int octal;
		octal = 012; // 8진법 (0으로 시작하는 숫자는 8진법 정수)
		// 0 ~ 7 까지만 존재함
		// 1 * 8^1 _ 2 * 8^0 = 8+2 = 10
		System.out.println("decimal = " + decimal);
		System.out.println("hexadecimal = " + hexadecimal);
		System.out.println("binary1 = " + binary1);
		System.out.println("binary2 = " + binary2);
		System.out.println("octal = " + octal);
		
		
		
		
		
	}
}
